name: Generate and Convert CV Markdown to PDF

on:
  push:
    paths:
      - 'docs/**'
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Generate Markdown and PDFs for all languages
        run: |
          sudo apt-get update && sudo apt-get install -y pandoc texlive-xetex texlive-fonts-recommended texlive-latex-extra
          mkdir -p docs/outputs/pdf
          node << 'EOF'
          const fs = require('fs');
          const { execSync } = require('child_process');

          // Load all supported languages dynamically
          const langs = JSON.parse(fs.readFileSync('docs/langs.json', 'utf8'));
          const supportedLangs = Object.keys(langs);

          function capitalize(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
          }

          function generateMarkdown(jsonPath, outputPath, dict) {
            const cv = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));
            let md = `# ${cv.name}\n`;
            md += `${cv.title}  \n\n`;

            md += `**${dict.sectionTitles.location}:** ${cv.location}  \n`;
            md += `**${dict.labels.email}:** ${cv.contact.email}  \n`;
            if (cv.contact.linkedin) {
              md += `**${dict.labels.linkedin}:** [${cv.contact.linkedin}](${cv.contact.linkedin})  \n`;
            }
            if (cv.contact.github) {
              md += `**${dict.labels.github}:** [${cv.contact.github}](${cv.contact.github})  \n`;
            }
            md += `\n`;

            if (cv.summary) {
              md += `# ${dict.sectionTitles.summary}\n\n${cv.summary}\n\n`;
            }

            if (cv.experience && cv.experience.length > 0) {
              md += `# ${dict.sectionTitles.experience}\n\n`;
              cv.experience.forEach(exp => {
                md += `### ${exp.title} - ***${exp.company}***\n\n`;
                md += `***${exp.type}*** | *${exp.location}* | *${exp.period}*\n\n`;
                if (exp.stack) {
                  md += `**${dict.sectionTitles.techStack}:** ${exp.stack.join(', ')}\n\n`;
                }
                if (exp.notes && exp.notes.length > 0) {
                  exp.notes.forEach(note => md += `- ${note}\n`);
                  md += `\n`;
                }
              });
            }

            if (cv.techStack) {
              md += `\n# ${dict.sectionTitles.techStack}\n\n`;
              Object.entries(cv.techStack).forEach(([category, items]) => {
                md += `**${capitalize(category)}:** ${items.join(', ')}\n\n`;
              });
            }

            if (cv.languages) {
              md += `\n# ${dict.sectionTitles.languages}\n\n`;
              Object.entries(cv.languages).forEach(([lang, level]) => {
                md += `- **${capitalize(lang)}:** ${level}\n`;
              });
            }

            fs.writeFileSync(outputPath, md);
            console.log(`Generated ${outputPath}`);
          }

          supportedLangs.forEach(lang => {
            const suffix = lang === "en" ? "" : `_${lang}`;
            const jsonPath = `docs/cv${suffix}.json`;
            const mdPath = `docs/outputs/cv${suffix}.md`;
            const pdfPath = `docs/outputs/pdf/cv${suffix}.pdf`;

            if (!fs.existsSync(jsonPath)) {
              console.warn(`âš  No file found for ${jsonPath}, skipping.`);
              return;
            }

            // Use full dictionary for the language to allow access to labels/sections etc
            generateMarkdown(
              jsonPath,
              mdPath,
              langs[lang]
            );
            execSync(`pandoc "${mdPath}" -o "${pdfPath}" --pdf-engine=xelatex -V geometry:margin=1.5cm`);
            console.log(`Created PDF: ${pdfPath}`);
          });
          EOF

      - name: Commit generated PDFs
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add docs/outputs/pdf/*.pdf
          git diff --staged --quiet || git commit -m "Auto-generate CV PDFs"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "auto-release-${{ github.run_number }}"
          name: "Automated Release ${{ github.run_number }}"
          body: |
            This release includes:
            - Updated CV PDFs for all supported languages
            - Latest debug APK build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload PDFs and APK to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "auto-release-${{ github.run_number }}"
          files: |
            docs/outputs/pdf/cv.pdf
            docs/outputs/pdf/cv_de.pdf
            docs/outputs/pdf/cv_tr.pdf
            docs/outputs/apk/app-debug.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
